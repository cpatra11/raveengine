// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String? // Added for user profile image (comes from Google)
  password      String? // Make password optional for OAuth users
  provider      String? // Track authentication provider (google, credentials)
  hasPaid       Boolean   @default(false)

  accounts     Account[] // Added for OAuth account linkage
  sessions     Session[] // Added for OAuth sessions
  testimonials Testimonial[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String
  expires DateTime
  type    String?

  @@unique([email, token])
}

model Testimonial {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  rating   Int?
  text     String
  date     DateTime @default(now())
  source   String? // google, csv, manual, webhook
  userId   String   @db.ObjectId
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  metadata Json? // For storing additional data like Google Review ID, webhook source, etc.
}
